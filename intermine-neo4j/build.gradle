task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

apply plugin: "java"
apply plugin: "application"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

dependencies {
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'antlr', name: 'antlr', version: '2.7.6'
    compile group: 'org.neo4j.procedure', name: 'apoc', version: '3.2.0.1' //latest available on maven (3.2.0.3 not yet available)
    compile group: 'commons-codec', name: 'commons-codec', version: '1.9'
    compile group: 'commons-httpclient', name: 'commons-httpclient', version: '3.0'
    compile group: 'commons-io', name: 'commons-io', version: '2.0.1'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.1.1'
    compile files('lib/intermine-api.jar')
    compile files('lib/intermine-model.jar')
    compile files('lib/intermine-client.jar')
    compile files('lib/intermine-pathquery.jar')
    compile group: 'org.jdom', name: 'jdom', version: '1.1.3'
    compile group: 'org.json', name: 'json', version: '20131018'//not found 20110106
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: '1.3.0'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    compile group: 'stax', name: 'stax-api', version: '1.0'
    compile files('lib/stax-ri-1.0.jar')//not found in maven
    testCompile group: 'junit', name: 'junit', version: '4.8.2'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.1.3'
}

task loader(type: JavaExec) {
    if(project.hasProperty('Args')){
        args(Args.split(','))
    }
    description = "Neo4j Loader: loads a mine into Neo4j using parameters in neo4jloader.properties; optionally specify desired class. Usage ./gradlew loader -PArgs=Gene"
    classpath sourceSets.main.runtimeClasspath
    mainClassName = "org.intermine.neo4j.Neo4jLoader"
    main = "org.intermine.neo4j.Neo4jLoader"
}

task nodeLoader(type: JavaExec) {
    if(project.hasProperty('Args')){
        args(Args.split(','))
    }
    description = "Neo4j Node Loader: loads a single node into Neo4j identified by its class and InterMine id. Usage: ./gradlew nodeLoader -PArgs=Gene,4295368"
    classpath sourceSets.main.runtimeClasspath
    main = "org.intermine.neo4j.Neo4jNodeLoader"
}

task completer(type: JavaExec) {
    if(project.hasProperty('Args')){
	args(Args.split(','))
    }
    description = "Neo4j Completer: completes the references and collections. Usage: ./gradlew completer -PArgs=Gene"
    classpath sourceSets.main.runtimeClasspath
    main = "org.intermine.neo4j.Neo4jCompleter"
}

task edgeLoader(type: JavaExec) {
    if(project.hasProperty('Args')){
        args(Args.split(','))
    }
    description = "Neo4j Edge Loader: loads edges into Neo4j given by source class, edge reference or collection, and target as referenced in the edge class. Usage: ./gradlew edgeLoader -PArgs=Gene,chromosomeLocation,locatedOn"
    classpath sourceSets.main.runtimeClasspath
    main = "org.intermine.neo4j.Neo4jEdgeLoader"
}

task sequenceLoader(type: JavaExec) {
    if(project.hasProperty('Args')){
        args(Args.split(','))
    }
    description = "Neo4j Sequence Loader: loads sequence residues into a specified Postgres table which has already been created (see source). Usage: ./gradlew sequenceLoader"
    classpath sourceSets.main.runtimeClasspath
    main = "org.intermine.neo4j.Neo4jSequenceLoader"
}

task imModelXMLDumper(type: JavaExec) {
    if(project.hasProperty('Args')){
        args(Args.split(','))
    }
    description = "InterMineModelXMLDumper: simple utility to dump an InterMine model in XML form to standard output. Usage: ./gradlew imModelXMLDumper -PArgs=http://www.synbiomine.org/synbiomine/service"
    classpath sourceSets.main.runtimeClasspath
    main = "org.intermine.neo4j.InterMineModelXMLDumper"
}

task modelParser(type: JavaExec) {
    if(project.hasProperty('Args')){
        args(Args.split(','))
    }
    description = "Neo4jModelParser: dumps out the model as converted for Neo4j use from a Neo4j-modified genetic model XML file or, optionally, the Neo4j relationship type for a given class.field. Usage: ./gradlew modelParser -PArgs=neo4j-genomic_model.xml[,Gene.homologue]"
    classpath sourceSets.main.runtimeClasspath
    main = "org.intermine.neo4j.Neo4jModelParser"
}
